{"ast":null,"code":"var _jsxFileName = \"/Users/sabrinabongiovanni/crwn-clothing-app-reducers/src/contexts/cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { type } from '@testing-library/user-event/dist/type';\nimport { createContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id); // check if quantity is equal to 1, if it is remove that item from the cart\n\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  } // return back cartitems with matching cart item with reduced quantity\n\n\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? { ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0,\n  cartTotal: 0\n});\nconst INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n  cartCount: 0,\n  cartTotal: 0\n};\n\nconst cartReducer = (state, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case 'SET_CART_ITEMS':\n      return { ...state,\n        ...payload\n      };\n\n    default:\n      throw new Error(`Unhandled type of ${type} in cartReducer`);\n  }\n};\n\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [{\n    cartItems,\n    cartCount,\n    cartTotal,\n    isCartOpen\n  }, dispatch] = useReducer(cartReducer, INITIAL_STATE);\n\n  const updateCartItemsReducer = newCartItems => {\n    const newCartCount = newCartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    const newCartTotal = newCartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n    dispatch({\n      type: 'SET_CART_ITEMS',\n      payload: {\n        cartItems: newCartItems,\n        cartCount: newCartCount,\n        cartTotal: newCartTotal\n      }\n    });\n  };\n\n  const addItemToCart = productToAdd => {\n    const newCartItems = addCartItem(cartItems, productToAdd);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const removeItemToCart = cartItemToRemove => {\n    const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const clearItemFromCart = cartItemToClear => {\n    const newCartItems = clearCartItem(cartItems, cartItemToClear);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const value = {\n    isCartOpen: true,\n    setIsCartOpen: () => {},\n    addItemToCart,\n    removeItemToCart,\n    clearItemFromCart,\n    cartItems,\n    cartCount,\n    cartTotal\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"q1qz6M7/bv5fr97dbD4+ZbDHb/A=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/sabrinabongiovanni/crwn-clothing-app-reducers/src/contexts/cart.context.jsx"],"names":["type","createContext","useReducer","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","clearCartItem","cartItemToClear","CartContext","isCartOpen","setIsCartOpen","addItemToCart","removeItemFromCart","clearItemFromCart","cartCount","cartTotal","INITIAL_STATE","cartReducer","state","action","payload","Error","CartProvider","children","dispatch","updateCartItemsReducer","newCartItems","newCartCount","reduce","total","newCartTotal","price","removeItemToCart","value"],"mappings":"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","sourcesContent":["import { type } from '@testing-library/user-event/dist/type';\nimport { createContext, useReducer } from 'react';\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === productToAdd.id\n  );\n\n  if (existingCartItem) {\n    return cartItems.map((cartItem) =>\n      cartItem.id === productToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    );\n  }\n\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === cartItemToRemove.id\n  );\n\n  // check if quantity is equal to 1, if it is remove that item from the cart\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\n  }\n\n  // return back cartitems with matching cart item with reduced quantity\n  return cartItems.map((cartItem) =>\n    cartItem.id === cartItemToRemove.id\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\n      : cartItem\n  );\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) =>\n  cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\n\nexport const CartContext = createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0,\n  cartTotal: 0,\n});\n\nconst INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n  cartCount: 0,\n  cartTotal: 0,\n};\n\nconst cartReducer = (state, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case 'SET_CART_ITEMS':\n      return {\n        ...state,\n        ...payload,\n      };\n    default:\n      throw new Error(`Unhandled type of ${type} in cartReducer`);\n  }\n};\n\nexport const CartProvider = ({ children }) => {\n  const [{ cartItems, cartCount, cartTotal, isCartOpen }, dispatch] =\n    useReducer(cartReducer, INITIAL_STATE);\n\n  const updateCartItemsReducer = (newCartItems) => {\n    const newCartCount = newCartItems.reduce(\n      (total, cartItem) => total + cartItem.quantity,\n      0\n    );\n\n    const newCartTotal = newCartItems.reduce(\n      (total, cartItem) => total + cartItem.quantity * cartItem.price,\n      0\n    );\n\n    dispatch({\n      type: 'SET_CART_ITEMS',\n      payload: {\n        cartItems: newCartItems,\n        cartCount: newCartCount,\n        cartTotal: newCartTotal,\n      },\n    });\n  };\n\n  const addItemToCart = (productToAdd) => {\n    const newCartItems = addCartItem(cartItems, productToAdd);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const removeItemToCart = (cartItemToRemove) => {\n    const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const clearItemFromCart = (cartItemToClear) => {\n    const newCartItems = clearCartItem(cartItems, cartItemToClear);\n    updateCartItemsReducer(newCartItems);\n  };\n\n  const value = {\n    isCartOpen: true,\n    setIsCartOpen: () => {},\n    addItemToCart,\n    removeItemToCart,\n    clearItemFromCart,\n    cartItems,\n    cartCount,\n    cartTotal,\n  };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}