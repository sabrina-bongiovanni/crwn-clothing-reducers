{"ast":null,"code":"var _jsxFileName = \"/Users/sabrinabongiovanni/crwn-clothing-app-reducers/src/contexts/Cart.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? { ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  return [...cartItems, { ...productToAdd,\n    quantity: 1\n  }];\n};\n\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  cartCount: 0\n});\nexport const CartProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const [cartCount, setCartCount] = useState(0);\n  useEffect(() => {\n    const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    setCartCount(newCartCount);\n  }, [cartItems]);\n\n  const addItemToCart = productToAdd => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    cartItems,\n    cartCount\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CartProvider, \"1STVRVZJMMTq6OZavO9o7qwZdno=\");\n\n_c = CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/Users/sabrinabongiovanni/crwn-clothing-app-reducers/src/contexts/Cart.context.jsx"],"names":["createContext","useState","useEffect","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","CartContext","isCartOpen","setIsCartOpen","addItemToCart","cartCount","CartProvider","children","setCartItems","setCartCount","newCartCount","reduce","total","value"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;;;AAEA,MAAMC,WAAW,GAAG,CAACC,SAAD,EAAYC,YAAZ,KAA6B;AAC/C,QAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CACtBC,QAAD,IAAcA,QAAQ,CAACC,EAAT,KAAgBJ,YAAY,CAACI,EADpB,CAAzB;;AAIA,MAAIH,gBAAJ,EAAsB;AACpB,WAAOF,SAAS,CAACM,GAAV,CAAeF,QAAD,IACnBA,QAAQ,CAACC,EAAT,KAAgBJ,YAAY,CAACI,EAA7B,GACI,EAAE,GAAGD,QAAL;AAAeG,MAAAA,QAAQ,EAAEH,QAAQ,CAACG,QAAT,GAAoB;AAA7C,KADJ,GAEIH,QAHC,CAAP;AAKD;;AACD,SAAO,CAAC,GAAGJ,SAAJ,EAAe,EAAE,GAAGC,YAAL;AAAmBM,IAAAA,QAAQ,EAAE;AAA7B,GAAf,CAAP;AACD,CAbD;;AAeA,OAAO,MAAMC,WAAW,gBAAGZ,aAAa,CAAC;AACvCa,EAAAA,UAAU,EAAE,KAD2B;AAEvCC,EAAAA,aAAa,EAAE,MAAM,CAAE,CAFgB;AAGvCV,EAAAA,SAAS,EAAE,EAH4B;AAIvCW,EAAAA,aAAa,EAAE,MAAM,CAAE,CAJgB;AAKvCC,EAAAA,SAAS,EAAE;AAL4B,CAAD,CAAjC;AAQP,OAAO,MAAMC,YAAY,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AAC5C,QAAM,CAACL,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACG,SAAD,EAAYe,YAAZ,IAA4BlB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACe,SAAD,EAAYI,YAAZ,IAA4BnB,QAAQ,CAAC,CAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,YAAY,GAAGjB,SAAS,CAACkB,MAAV,CACnB,CAACC,KAAD,EAAQf,QAAR,KAAqBe,KAAK,GAAGf,QAAQ,CAACG,QADnB,EAEnB,CAFmB,CAArB;AAIAS,IAAAA,YAAY,CAACC,YAAD,CAAZ;AACD,GANQ,EAMN,CAACjB,SAAD,CANM,CAAT;;AAQA,QAAMW,aAAa,GAAIV,YAAD,IAAkB;AACtCc,IAAAA,YAAY,CAAChB,WAAW,CAACC,SAAD,EAAYC,YAAZ,CAAZ,CAAZ;AACD,GAFD;;AAGA,QAAMmB,KAAK,GAAG;AACZX,IAAAA,UADY;AAEZC,IAAAA,aAFY;AAGZC,IAAAA,aAHY;AAIZX,IAAAA,SAJY;AAKZY,IAAAA;AALY,GAAd;AAQA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEQ,KAA7B;AAAA,cAAqCN;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAzBM;;GAAMD,Y;;KAAAA,Y","sourcesContent":["import { createContext, useState, useEffect } from 'react';\n\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(\n    (cartItem) => cartItem.id === productToAdd.id\n  );\n\n  if (existingCartItem) {\n    return cartItems.map((cartItem) =>\n      cartItem.id === productToAdd.id\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\n        : cartItem\n    );\n  }\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\n};\n\nexport const CartContext = createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  cartCount: 0,\n});\n\nexport const CartProvider = ({ children }) => {\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const [cartCount, setCartCount] = useState(0);\n\n  useEffect(() => {\n    const newCartCount = cartItems.reduce(\n      (total, cartItem) => total + cartItem.quantity,\n      0\n    );\n    setCartCount(newCartCount);\n  }, [cartItems]);\n\n  const addItemToCart = (productToAdd) => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    cartItems,\n    cartCount,\n  };\n\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}